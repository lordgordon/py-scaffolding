# Workflow to validate a PR
name: pr-validation

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  # keep this aligned with Makefile
  DOCKER_BASE_IMAGE: python:3.10.5-slim-buster
  IMAGE_NAME: py-scaffolding
  IMAGE_LOCAL_TAG: current-local
  GITHUB_ARTIFACTS_PATH: artifacts

jobs:
  build-images:
    runs-on: ubuntu-22.04
    steps:
      # checkout the repo
      - uses: actions/checkout@v2
      - run: ls -lsa
      # build images
      - uses: docker/setup-buildx-action@v2
      - name: Build test image
        uses: docker/build-push-action@v3
        with:
          tags: ${{env.IMAGE_NAME}}-testing:${{env.IMAGE_LOCAL_TAG}}
          target: testing
          build-args: |
            DOCKER_BASE_IMAGE=${{env.DOCKER_BASE_IMAGE}}
            PYSETUP_PATH=/app
          push: false
      - name: Build production image
        uses: docker/build-push-action@v3
        with:
          tags: ${{env.IMAGE_NAME}}:${{env.IMAGE_LOCAL_TAG}}
          target: production
          build-args: |
            DOCKER_BASE_IMAGE=${{env.DOCKER_BASE_IMAGE}}
            PYSETUP_PATH=/app
          push: false
      # build image artifact to share in the next jobs
      - name: Prepare artifacts
        run: |
          mkdir -p ${GITHUB_ARTIFACTS_PATH}
          cd ${GITHUB_ARTIFACTS_PATH}
          docker image ls
          docker save ${IMAGE_NAME}-testing:${IMAGE_LOCAL_TAG} | gzip > test.tar.gz
          docker save ${IMAGE_NAME}:${IMAGE_LOCAL_TAG} | gzip > production.tar.gz
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: docker-images
          path: ${{env.GITHUB_ARTIFACTS_PATH}}
          retention-days: 1

  run-tests:
    needs: build-images
    runs-on: ubuntu-22.04
    steps:
      # checkout the repo
      - uses: actions/checkout@v2
      # restore docker images
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: docker-images
          path: ${{env.GITHUB_ARTIFACTS_PATH}}/test.tar.gz
      - name: Restore docker image
        run: |
          docker load < ${GITHUB_ARTIFACTS_PATH}/test.tar.gz
          docker image ls
      # run tests
      - name: Linters
        run: docker run --rm ${IMAGE_NAME}-tests:${IMAGE_LOCAL_TAG} make lint
      - name: Unit tests
        run: docker run --rm ${IMAGE_NAME}-tests:${IMAGE_LOCAL_TAG} make test
        # NOTE: this may be a docker compose for more complex scenarios involving database and mocks
      - name: Documentation
        run: docker run --rm ${IMAGE_NAME}-tests:${IMAGE_LOCAL_TAG} make doc

  check-vulnerabilities:
    needs: build-images
    runs-on: ubuntu-22.04
    steps:
      # checkout the repo
      - uses: actions/checkout@v2
      # restore docker images
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: docker-images
          path: ${{env.GITHUB_ARTIFACTS_PATH}}/production.tar.gz
      - name: Restore docker image
        run: |
          docker load < ${GITHUB_ARTIFACTS_PATH}/production.tar.gz
          docker image ls
      # vulnerabilities checks with Trivy
      - name: Run Trivy against production image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{env.IMAGE_NAME}}:${{env.IMAGE_LOCAL_TAG}}
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          security-checks: "vuln,config,secret"
          severity: "CRITICAL,HIGH"
      # ${RUN_TRIVY} conf --exit-code 1 --severity HIGH,CRITICAL .
      #	${RUN_TRIVY} fs --exit-code 1 --ignore-unfixed --severity HIGH,CRITICAL --no-progress .
