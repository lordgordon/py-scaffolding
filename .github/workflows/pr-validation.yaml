# Workflow to validate a PR
name: pr-validation

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  # keep this aligned with Makefile and all workflows
  IMAGE_NAME: py-scaffolding
  IMAGE_LOCAL_TAG: current-local
  GITHUB_ARTIFACTS_PATH: artifacts
  DOCKER_HUB_REPOSITORY: lordgordon

jobs:
  build-images:
    name: Build images
    runs-on: ubuntu-24.04
    if: "!contains(github.event.head_commit.message, 'skip-ci')"
    # Don't run the pipeline when the commit message includes skip-ci
    steps:
      # checkout the repo
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Checkout LFS objects
        run: git lfs checkout
      - run: ls -lsa
      # build images
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{runner.os}}-buildx-${{github.sha}}
          restore-keys: |
            ${{runner.os}}-buildx-
      - name: Build test image
        id: build_test
        uses: docker/build-push-action@v6
        with:
          tags: ${{env.IMAGE_NAME}}-testing:${{env.IMAGE_LOCAL_TAG}}
          builder: ${{steps.buildx.outputs.name}}
          target: testing
          push: false
          load: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      - name: Build production image
        id: build_production
        uses: docker/build-push-action@v6
        with:
          tags: ${{env.IMAGE_NAME}}:${{env.IMAGE_LOCAL_TAG}}
          builder: ${{steps.buildx.outputs.name}}
          target: production
          push: false
          load: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      - name: Build migrations image
        id: build_migrations
        uses: docker/build-push-action@v6
        with:
          tags: ${{env.IMAGE_NAME}}-migrations:${{env.IMAGE_LOCAL_TAG}}
          builder: ${{steps.buildx.outputs.name}}
          target: migrations
          push: false
          load: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      - name: Test image digest
        run: echo ${{steps.build_test.outputs.digest}}
      - name: Production image digest
        run: echo ${{steps.build_production.outputs.digest}}
      - name: Migrations image digest
        run: echo ${{steps.build_migrations.outputs.digest}}
      # build image artifact to share in the next jobs
      - name: Prepare artifacts
        run: |
          mkdir -p ${GITHUB_ARTIFACTS_PATH}
          cd ${GITHUB_ARTIFACTS_PATH}
          docker image ls
          docker save ${IMAGE_NAME}-testing:${IMAGE_LOCAL_TAG} | gzip > test.tar.gz
          docker save ${IMAGE_NAME}:${IMAGE_LOCAL_TAG} | gzip > production.tar.gz
          ls -lsa
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: ${{env.GITHUB_ARTIFACTS_PATH}}
          retention-days: 1
      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  run-tests:
    name: Run tests
    needs: build-images
    runs-on: ubuntu-24.04
    steps:
      # checkout the repo
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      # restore docker images
      - run: mkdir -p ${GITHUB_ARTIFACTS_PATH}
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: ${{env.GITHUB_ARTIFACTS_PATH}}
      - name: Restore docker image
        run: |
          ls -lsa ${GITHUB_ARTIFACTS_PATH}
          docker load < ${GITHUB_ARTIFACTS_PATH}/test.tar.gz
          docker image ls
      - name: Add GITHUB_WORKSPACE as safe directory for git
        run: git config --global --add safe.directory "${{env.GITHUB_WORKSPACE}}"
      - name: Checkout LFS objects
        run: git lfs checkout
      - name: Code checks
        run: >-
          docker run --rm --volume "$(pwd):/repo" --workdir=/repo
          ${IMAGE_NAME}-testing:${IMAGE_LOCAL_TAG}
          make check
      - name: Unit tests
        if: "!cancelled()"
        run: >-
          docker run --rm
          --workdir=/app
          --volume "$(pwd):/app"
          --volume "$(pwd)/junit:/app/junit"
          --volume "$(pwd)/coverage:/app/coverage"
          ${IMAGE_NAME}-testing:${IMAGE_LOCAL_TAG}
          make test
        env:
          PY_COLORS: 1
      - name: Documentation
        run: docker run --rm ${IMAGE_NAME}-testing:${IMAGE_LOCAL_TAG} make doc
      # publish image to Docker Hub on success
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        if: github.ref == 'refs/heads/main'
        with:
          username: ${{secrets.DOCKER_HUB_USERNAME}}
          password: ${{secrets.DOCKER_HUB_ACCESS_TOKEN}}
      - name: Publish production image to Docker Hub
        id: publish_production
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v6
        with:
          tags: |
            ${{env.DOCKER_HUB_REPOSITORY}}/${{env.IMAGE_NAME}}:main
            ${{env.DOCKER_HUB_REPOSITORY}}/${{env.IMAGE_NAME}}:${{github.sha}}
          target: production
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache

  check-vulnerabilities:
    name: Check vulnerabilities
    needs: build-images
    runs-on: ubuntu-24.04
    permissions:
      actions: read
      security-events: write
    steps:
      # checkout the repo
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      # restore docker images
      - run: mkdir -p ${GITHUB_ARTIFACTS_PATH}
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: ${{env.GITHUB_ARTIFACTS_PATH}}
      - name: Restore docker image
        run: |
          ls -lsa ${GITHUB_ARTIFACTS_PATH}
          docker load < ${GITHUB_ARTIFACTS_PATH}/production.tar.gz
          docker image ls
      # vulnerabilities checks with Trivy
      - name: Prepare empty files
        run: |
          touch trivy-config-results.sarif trivy-fs-results.sarif trivy-image-results.sarif
      - name: Check config
        uses: aquasecurity/trivy-action@0.30.0
        with:
          scan-type: "config"
          format: "sarif"
          trivy-config: trivy.yaml
          exit-code: "1"
          output: "trivy-config-results.sarif"
      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-config-results.sarif"
          category: trivy-fs
      - name: Check repository
        uses: aquasecurity/trivy-action@0.30.0
        with:
          scan-type: "fs"
          format: "sarif"
          trivy-config: trivy.yaml
          exit-code: "1"
          output: "trivy-fs-results.sarif"
      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-fs-results.sarif"
          category: trivy-config
      - name: Check production image
        uses: aquasecurity/trivy-action@0.30.0
        with:
          image-ref: ${{env.IMAGE_NAME}}:${{env.IMAGE_LOCAL_TAG}}
          format: "sarif"
          trivy-config: trivy.yaml
          exit-code: "1"
          output: "trivy-image-results.sarif"
      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-image-results.sarif"
          category: trivy-image
